/***** sqlmapi.h ************** Vitsko D.A.   ******** 15/09/16 ****
*                                                                  *
*              Copyright (c) PANORAMA Group 1991-2016              *
*                      All Rights Reserved                         *
*                                                                  *
********************************************************************
*                                                                  *
*           FOR WINDOWS XP & WINDOWS 2003, 2008, Vista, 7          *
*                                                                  *
********************************************************************
*                                                                  *
*             Описание API-функций работы с SQL-картой             *
*                 создаваемой по SQL запросу к СУБД                *
*             Postgress/Postgis, MS SQL Server, Oracle             *
*                                                                  *
********************************************************************
*  Порядок работы:                                                 *
*                                                                  *
*     Для работы необходимо создать класс SQL-карты в ядре и       *
*  получить его идентификатор - HDBMAP (mapCreateSQLMap).          *
*     Далее весь функционал работает, принимая на вход этот        *
*  идентификатор. Если необходимо параллельно работать с           *
*  несколькими запросами к БД, для каждого создается свой HDBMAP.  *
*     По завершении работы все полученные HDBMAP необходимо        *
*  освободить (mapDeleteSQLMap).                                   *
*    Функция запуска процесса формирования карты по результатам    *
*  sql_запроса - mapSQLMapDataSetToMap.                            *
*    Перед вызовом mapSQLMapDataSetToMap соотвествующими функциями *
*  должно быть установлено соединение с БД, открыт исходный набор  *
*  данных и настроены параметры работы с картой-результатом.       *
*    Остальные функции являются сервисными (получить имена таблиц, *
*  список имен полей таблицы, запросить состояние соединения,      *
*  выполнить тест подключения к БД и т.д.).                        *
*                                                                  *
*******************************************************************/
#ifndef H_SQLMAPI
  #define H_SQLMAPI

#include "maptype.h"


#if defined(SQLMAPDLL)

 #if defined(__BORLANDC__) // For Borland C++
      #define _SQLMAPI  _export WINAPI
      #define _SQLMIMP
 #else
    #ifdef LINUXAPI
      #define _SQLMAPI  WINAPI
      #define _SQLMIMP
    #else
      #define _SQLMAPI  WINAPI
      #define _SQLMIMP  __declspec( dllexport )
    #endif
 #endif

#else

 #if defined(__BORLANDC__) // For Borland C++
      #define _SQLMAPI  _import WINAPI
      #define _SQLMIMP
 #else
      #ifdef LINUXAPI
        #define _SQLMAPI  WINAPI
        #define _SQLMIMP
      #else
        #define _SQLMAPI  WINAPI
        #define _SQLMIMP  __declspec( dllimport )
      #endif
 #endif

#endif



#if defined(_M_X64) || defined(BUILD_DLL64)
typedef __int64   HDBMAP;    // ИДЕНТИФИКАТОР КЛАССА SQL-КАРТЫ
#else
typedef long int  HDBMAP;
#endif


// тип данных для строк в 256 символов (в конце д.б. 0)
// элемент строкового массива - для передачи списков имен таблиц, полей и т.д.
typedef WCHAR DBMString[256];

#define SEM_CODE_LEN 32


//  ИДЕНТИФИКАТОРЫ КОМАНД (WM_COMMAND)
#define WM_USER_SPDB        0x41FF            // базовый номер сообщений компонента
#define WM_DBCONNECTED      WM_USER_SPDB      // БД подключена
#define WM_DBDISCONNECTED   WM_USER_SPDB+1    // БД отключена
#define WM_DATASETOPENED    WM_USER_SPDB+2    // Набор данных открыт
#define WM_DATASETCLOSED    WM_USER_SPDB+3    // Набор данных закрыт
#define WM_PROCCANCLED      WM_USER_SPDB+4    // Процесс остановлен
#define WM_PROCFINISHED     WM_USER_SPDB+5    // Процесс завершен
#define WM_PROCERROR        WM_USER_SPDB+6    // Ошибка в процессе выполнения
#define WM_PROCBEFORESTART  WM_USER_SPDB+7    // Уведомление о начале процесса
// Примечание: при запуске процесса переноса данных в отдельном потоке
//             сообщения функцией обратного вызова будут обрабатываться в рамках
//             этого потока (это отклики на сообщения WM_PROC*)


// Список (перечень таблиц, перечень полей в таблице и т.д.)
typedef struct DBMStringList
{
   long Length;         // Общая длина структуры в байтах (вместе с массивом)
   long Count;          // Количество элементов
   DBMString Items[1];  // Первый элемент (всего Count)
} DBMStringList, *PDBMStringList;


// ПРЕДНАЗНАЧЕНИЕ ПОЛЯ
enum TSQLMAP_FIELD_KIND
{
  SQLMAP_FIELD_SIMPLE     = (long int)0x00000000, // 0   = простое поле (вносится в семантику)
  SQLMAP_FIELD_PRIMARYKEY = (long int)0x00000001, // 1   = первиный ключ (ID объекта)
  SQLMAP_FIELD_RSCEXCODE  = (long int)0x00000002, // 2   = поле c классификационным кодом (для внешнего вида)
  SQLMAP_FIELD_SPATIAL    = (long int)0x00000004, // 4   = поле метрики
  SQLMAP_FIELD_OBJTEXT    = (long int)0x00000008, // 8   = поле текста подписи
  SQLMAP_FIELD_RSCKEY     = (long int)0x00000080  // 128 = поле с классификационным ключом (для внешнего вида)
};


// Режим работы с картой
enum TSQLMAP_MAP_REGIME
{
  SQLMAP_MAPREGIME_NONE             = 0x00000000, // 0   = не установлен
  SQLMAP_MAPREGIME_READY_BY_HANDLE  = 0x00000001, // 1   = готовая карта, задана извне по HSITE
  SQLMAP_MAPREGIME_READY_BY_PATH    = 0x00000002, // 2   = готовая карта, задана извне полным путем к карте
  SQLMAP_MAPREGIME_NEWMAP_REAL      = 0x00000004, // 4   = карта создется в процессе работы (как постоянная)
  SQLMAP_MAPREGIME_NEWMAP_TEMP      = 0x00000008, // 8   = карта создется в процессе работы (как временная)
  SQLMAP_MAPREGIME_GISSRV_ALIAS     = 0x00000010, // 16  = карта открывается с ГИС Сервера
  SQLMAP_MAPREGIME_FOR_MAIN_MAP     = 0x01000000  //     = флаг совместной работы с основной картой, заданной извне
};


// Описание поля
#define cSize_TSQLMap_Field 600 // размер структуры
// размер резерва для выравнивания структуры
#define cSize_TSQLMap_Field_Align cSize_TSQLMap_Field-sizeof(WCHAR)*(256+32)-sizeof(long int)
typedef struct TSQLMap_Field
{
   WCHAR          FieldName[256];                    // Имя поля в таблице (256 сиволов юникода)
   WCHAR          SemanticCode[SEM_CODE_LEN];        // Код семантики в классификаторе карты
   long int       FieldKind;                         // Предназначение поля  (4б)  - см. TSQLMAP_FIELD_KIND
   BYTE           Reserv[cSize_TSQLMap_Field_Align]; // Выравнивание
} TSQLMap_Field, *PSQLMap_Field;


// Настройки соответсвия данных у объекта карты и у записи в БД
typedef struct TSQLMap_DataSetFields
{
   WCHAR         PersonalName[256];   // собственное наименование набора данных
   WCHAR         TableName[256];      // имя таблицы
   long int      FieldCount;          // количество заполненных элементов в массиве полей (от 1 до DBM_MAX_FIELD_COUNT)   4б
   long int      Reserv1;             // выравнивание на 8 байт
   PSQLMap_Field FieldDefs;           // массив описания полей
   WCHAR         RSCKey[32];          // ключ классификатора (пока оставлен для совместимости, надо использовать RSCExCode)
   long int      RSCExCodeP;          // точка   - классификационный код по умолчанию (если нет спец.поля для него в БД) 4б
   long int      RSCExCodeL;          // линия   - классификационный код по умолчанию (если нет спец.поля для него в БД) 4б
   long int      RSCExCodeS;          // полигон - классификационный код по умолчанию (если нет спец.поля для него в БД) 4б
   long int      RSCExCodeT;          // подпись - классификационный код по умолчанию (если нет спец.поля для него в БД) 4б
} TSQLMap_DataSetFields, *PSQLMap_DataSetFields;



// ПРЕДНАЗНАЧЕНИЕ ПОЛЯ
enum TSQLMAP_AUTH_TYPE
{
  SQLMAP_AUTH_PASSWORD    = (long int)0x00000000, // 0   = аутентификация по логину/паролю
  SQLMAP_AUTH_SSPI        = (long int)0x00000001, // 1   = win-nt
  SQLMAP_AUTH_GSSAPI      = (long int)0x00000002  // 2   = kerberos
};


// Параметры подключения к БД
typedef struct TSQLMap_DBConnectParm
{
  WCHAR Address[256];  // Адрес или имя хоста
  long int Port;       // Порт
  long int Reserv1;    // выравнивание на 8 байт
  WCHAR DataBase[256]; // Имя БД
  WCHAR Login[128];    // Логин
  WCHAR Passw[128];    // Пароль
  long int DBMSType;   // Тип СУБД (1=PG, 2=Oracle, 3=MSSQL)
  long int AuthType;   // Флаг варианта авторизации
} TSQLMap_DBConnectParm, *PSQLMap_DBConnectParm;


extern "C"
{
  // Создать экземпляр класса для работы с sql-картой
  // при ошибке возвращает ноль
  // иначе идентификатор контекста созданного класса
  // параметры:
  //  - handle - идентификатор окна, которому отсылается сообщение
  //             о состоянии процесса
  //            (или функция обратного вызова - для Linux)
_SQLMIMP HDBMAP _SQLMAPI mapCreateSQLMap();


  // Уничтожить экземпляр класса работы с sql-картой
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // Удаление и освобождение HMAP созданной карты не выполняется!
  // Это необходимо делать снаружи компонента.
_SQLMIMP void _SQLMAPI mapDeleteSQLMap(HDBMAP smap);


  // Открыть соединение sql-карты с БД и установить карту для нанесения
  // результата запроса, уже открытую снаружи
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  //  - params - параметры подключения к БД
  //  - map    - идентификатор открытых картографических данных
  //  - site   - идентификатор обрабатываемой векторной карты
  // при ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapConnect(HDBMAP smap,
                                            const TSQLMap_DBConnectParm* params,
                                            HMAP map, HSITE site);


  // Подключить экземпляр класса sql-карты к БД
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  //  - params - параметры подключения к БД
  // при ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapConnectDB(HDBMAP smap,
                                              const TSQLMap_DBConnectParm* params);

  // Подключить экземпляр класса sql-карты к БД по установленным ранее параметрам
  // Если подключение уже установлено, возвращается положительный результат
  // без переподключения
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  // при ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapTryConnectDB(HDBMAP smap);


  // Установить для класса sql-карты пользовательскую карту для нанесения
  // результата запроса, уже открытую снаружи
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  //  - map    - идентификатор открытых картографических данных
  //  - site   - идентификатор обрабатываемой векторной карты
  // при ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapSetMapByHandle(HDBMAP smap, HMAP map, HSITE site);


  // Подключиться к карте на ГИС Сервере
  // параметры:
  //  - smap  - идентификатор контекста класса sql-карты
  //  - host  - адрес ГИС Сервера
  //  - port  - порт
  //  - alias - алиас карты
  //  - user  - пользователь
  //  - passw - пароль
  // При ошибке возвращает ноль
  // Иначе устанавливает режим соединения с картой на ГИС Сервере
_SQLMIMP long int _SQLMAPI mapSQLMapSetParamForGISServerMap(HDBMAP smap,
                                                    const WCHAR* host,
                                                    long int port,
                                                    const WCHAR* alias,
                                                    const WCHAR* user,
                                                    const WCHAR* passw);


  // Установить параметры для создания новой карты как временной
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  //  - map    - идентификатор открытых картографических данных
  //  - rscname  - имя файла классификатора
  // Все параметры для создания временной карты берутся из основной карты (map).
  // Созданная временая карта будет добавлена к основной карте.
  // Функция только устанавливает параметры, само создание карты будет выполнено
  // уже после открытия набора данных по результатам запроса.
  // при ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI  mapSQLMapSetParamForTempMap(HDBMAP smap,
                                                        HMAP mainmap,
                                                        const WCHAR *rscname,
                                                        long int epsg,
                                                        long int scale);


  // Установить параметры для создания новой карты
  // параметры:
  //  - smap     - идентификатор контекста класса sql-карты
  //  - mainmap  - идентификатор открытых пространственных данных (основная карта)
  //  - rscname  - имя файла классификатора
  //  - epsg     - код EPSG для установки параметров карты
  //  - scale    - базовый масштаб карты
  //  - outdir   - директория для размещения готовой карты
  //  - mapname  - имя карты
  //  - mapfile  - имя файла для готовой карты (или префикс)
  //  - isprefix - использовать mapfile как префикс, далее имя генерируется
  // при ошибке возвращает ноль
  //   Вызов функции устанавливает режим создания новой карты для размещения
  // результата SQL-запроса. Если ранее устанавливалась карта другой функцией и
  // режим был установлен - использовать существующую (по имени или по HSITE),
  // то эти параметры и режим будут сброшены.
  //   Если mainmap != 0, тогда новая карта будет добавлена в контекст открытых
  // данных. При этом, если epsg=0, то параметры новой карты будут взяты из
  // mainmap.
  //   Функция только устанавливает параметры, само создание карты будет
  // выполнено уже после открытия набора данных по результатам запроса.
_SQLMIMP long int _SQLMAPI mapSQLMapSetParamForNewMap(HDBMAP smap,
                                                      HMAP mainmap,
                                                      const WCHAR *rscname,
                                                      long int epsg,
                                                      long int scale,
                                                      const WCHAR *mapname,
                                                      const WCHAR *outdir,
                                                      const WCHAR *mapfile,
                                                      long int isprefix = 0);


  // Установить карту для размещения результата SQL-запроса по имени файла
  // параметры:
  //  - smap     - идентификатор контекста класса sql-карты
  //  - mainmap  - идентификатор открытых пространственных данных (основная карта)
  //  - mapname  - полный путь к файлу карты
  //  - clear    - флаг необходимости очистки карты перед заполнением
  // при ошибке возвращает ноль
  //   Вызов функции устанавливает режим использования уже сушествующей карты
  // для размещения результата SQL-запроса. Если ранее устанавливалась карта
  // другой функцией (создавать новую или использовать готовую по HSITE),
  // то эти параметры и режим будут сброшены.
  //   Если mainmap != 0, тогда карта будет добавлена в контекст открытых
  // данных.
  //   Функция только устанавливает параметры, попытка открытия карты будет
  // выполнена при открытии набора данных по результатам запроса.
_SQLMIMP long int _SQLMAPI mapSQLMapSetMapByFileName(HDBMAP smap,
                                                     HMAP mainmap,
                                                     const WCHAR *mapname,
                                                     long int clear = 1);


  // Подготовить карту и настроить на нее компонент SQL-карты
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // При ошибке возвращает ноль
  // На основе заданных заранее параметров для карты (ф-ии mapSQLMapSetMap...()
  // и mapSQLMapSetParamFor...Map() устанавливает карту в компонент, создавая ее
  // при необходимости (в зависимости от режима)
  // При ошибке возвращает ноль, иначе ненулевое значение
  // После успешного выполнения можно запросить HMAP и HSITE
  // (HMAP != HSITE если создаваемая карта добавляется к основной)
_SQLMIMP long int _SQLMAPI mapSQLMapPrepareMap(HDBMAP smap);


  // Запросить путь к файлу карты
  // параметры:
  //  - smap     - идентификатор контекста класса sql-карты
  // при ошибке возвращает ноль
  // иначе возвращает путь к карте-результату
  // запрашивать путь к файлу карты следует после вызова mapSQLMapDataSetToMap,
  // так как по его резульатам путь может быть сгенерирован
_SQLMIMP WCHAR* _SQLMAPI mapSQLMapGetMapFileName(HDBMAP smap);


  // Запросить идентификатор открытой карты результата (HSITE)
  // параметры:
  //  - smap     - идентификатор контекста класса sql-карты
  // при ошибке возвращает ноль
_SQLMIMP HSITE _SQLMAPI mapSQLMapGetSiteHandle(HDBMAP smap);


  // Запросить идентификатор открытой базовой карты (HMAP)
  // (может совпадать с HSITE, если HMAP специально не устанавливался)
  // параметры:
  //  - smap     - идентификатор контекста класса sql-карты
  // при ошибке возвращает ноль
_SQLMIMP HMAP _SQLMAPI mapSQLMapGetMapHandle(HDBMAP smap);


  // Запросить режим работы с картой-результатом
  // Режим устанавливается в зависимости от того, какой функцией была
  // установлена карта. Карта может быть задана как существующая либо она будет
  // создана в процессе работы
  // Возможные значения режима перечислены в TSQLMAP_MAP_REGIME
  // при ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapGetMapRegime(HDBMAP smap);


  // Закрыть соединение sql-карты с векторной картой и БД
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // Созданная карта не удаляется и ее HMAP/HSITE не освобождается!
  // Это надо делать снаружи компонента.
  // Метод закрывает коннект с БД и "забывает" про карту (отключается от нее)
_SQLMIMP void _SQLMAPI mapSQLMapDisconnect(HDBMAP smap);


  // Закрыть соединение sql-карты с обрабатываемой картой
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // Созданная карта не удаляется и ее HMAP/HSITE не освобождается!
  // Это надо делать снаружи компонента.
  // Метод заставляет компонент "забывыть" про карту (отключается от нее)
_SQLMIMP void _SQLMAPI mapSQLMapDisconnectMap(HDBMAP smap);


  // Закрыть соединение sql-карты с БД
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
_SQLMIMP void _SQLMAPI mapSQLMapDisconnectDB(HDBMAP smap);


  // Запросить состояние соединения класса sql-карты
  // с обрабатываемой картой и с БД
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // при ошибке или отсутствии подключения возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapConnectActive(HDBMAP smap);


  // Запросить состояние соединения sql-карты с БД
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // при ошибке или отсутствии подключения возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapConnectDBActive(HDBMAP smap);


  // Запросить состояние соединения sql-карты с векторной картой
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // при ошибке или отсутствии подключения возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapConnectMapActive(HDBMAP smap);


  // Проверить возможность соединения класса sql-карты
  // с сервером БД по заданным параметрам
  // Для проверки создается временный класс подлючения,
  // выполняется попытка соединения и его разрыв.
  // при ошибке или невозможности подключения возвращает ноль
  // иначе ненулевое значение
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  //  - params - параметры подключения к БД
_SQLMIMP long int _SQLMAPI mapSQLMapCheckConnectDB(HDBMAP smap,
                                                   const TSQLMap_DBConnectParm* params);


  // Узнать текст крайней ошибки
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  // возвращаемое значение может быть нулем
_SQLMIMP WCHAR* _SQLMAPI mapSQLMapGetLastErrorText(HDBMAP smap);


  // Открыть набор исходных данных в БД и настроить на работу с ним класс sql-карты
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  //  - sql    - текст SQL-запроса к БД
  //  - fields - описание полей в результирующем наборе данных
  //  - associate - ассоциировать не указанные в fields поля как семантики
  //  - doopen - выполнить сразу открытие набора данных (если 0 - только настроиться)
  // класс sql-карты должен быть уже подключен к БД
  // при ошибке возращает -1
  // возвращаемое значение 0 и более - количество записей в открытом наборе данных
_SQLMIMP long int _SQLMAPI mapSQLMapOpenDataSet(HDBMAP smap, const WCHAR* sql,
                                                const TSQLMap_DataSetFields* fields,
                                                long int associate = 1,
                                                long int doopen = 1);

  // Открыть набор исходных данных в БД по установленным ранее параметрам
  // и настроить на работу с ним класс sql-карты
  // Если подключение уже установлено и набор данных открыт,
  // возвращается положительный результат без переоткрытия данных
  // параметры:
  //  - smap   - идентификатор контекста класса sql-карты
  // при ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapTryOpenDataSet(HDBMAP smap);


  // Закрыть набор исходных данных в классе sql-карты
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
_SQLMIMP void _SQLMAPI mapSQLMapCloseDataSet(HDBMAP smap);


  // Нанести данные из набора данных на sql-карту
  // проверка наличия таких объектов в карте не производиться
  // все объекты при каждом вызове наносятся как новые
  // при необходимости перед вызовом карту почистить самостоятельно
  // при ошибке возращает 0
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  //  - asynchronously  - флаг асинхронного режима обработки
  // В асинхронном режиме открывается отдельный поток, тогда
  // функция запускает отдельный поток для выполнения,
  // и не дожидаясь его завершения, возвращает количество записей в наборе данных
  // Количество успешно обработанных записей может быть меньше.
  // В синхронном режиме функция дожидается окончания обработки и возвращает
  // реальное количество успешно обработанных записей.
_SQLMIMP long int _SQLMAPI mapSQLMapDataSetToMap(HDBMAP smap, long int asynchronously = 0);


  // Запросить перечень таблиц БД
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  //  - list   - структура с массивом строк (265 символов)
  //  - size   - размер выделенной памяти для массива
  // Для определения необходимого размера для выделения памяти
  // данная функция вызывается с пустыми параметрами list и count
  // при ошибке возращает 0, иначе кол-во байт, необходимых для размещения list
  // если вызов функции осущствляется без предварительного запроса размера,
  // необходимо выполнить проверку размеров - list->Length и того, что возвращает функция
  // list->Length - реально заполненный размер, если он меньше результата функции, это
  // означает, что выделенной памяти не хватило для записи всего списка
_SQLMIMP long int _SQLMAPI mapSQLMapGetTableList(HDBMAP smap,
                                                 PDBMStringList list,
                                                 long int size);


  // Запросить перечень полей таблицы БД
  // параметры:
  //  - smap - идентификатор контекста класса sql-карты
  //  - tblname - имя таблицы
  //  - list    - структура с массивом строк (265 символов)
  //  - size    - размер выделенной памяти для массива
  // Для определения необходимого размера для выделения памяти
  // данная функция вызывается с пустыми параметрами list и count
  // при ошибке возращает 0, иначе кол-во байт, необходимых для размещения list
  // если вызов функции осущствляется без предварительного запроса размера,
  // необходимо выполнить проверку размеров - list->Length и того, что возвращает функция
  // list->Length - реально заполненный размер, если он меньше результата функции, это
  // означает, что выделенной памяти не хватило для записи всего списка
_SQLMIMP long int _SQLMAPI mapSQLMapGetTableFieldList(HDBMAP smap,
                                                      const WCHAR *tblname,
                                                      PDBMStringList list,
                                                      long int size);


  // Установить функцию обратного вызова для получения
  // сведений о ходе выполнения
  // параметры:
  //  - smap      - идентификатор контекста класса sql-карты
  //  - callevent - адрес функции оборатного вызова для уведомления о проценте
  //                обработанных наборов данных (см. maptype.h)
  //  - parm      - адрес параметров, которые будут переданы при вызове функции
  //                (обычно адрес класса управляющей программы),
  //                вторым параметром передается код сообщения (например, WM_PROGRESS)
  //                третьим - значение для данного сообщения (например, процент от 0 до 100)
  // При ошибке возвращает ноль
_SQLMIMP long int _SQLMAPI mapSQLMapSetCallBackEvent(HDBMAP smap, EVENTCALL callevent, void * parm);


  // Установить параметры подключения и выборки данных из БД по файлу SQL-карты
  // (файл SQL-карты *.DBM)
  // параметры:
  //  - smap     - идентификатор контекста класса sql-карты
  //  - filename - полный путь к файлу SQL-карты (*.dbm)
  //  - mainmap  - идентификатор открытой основной карты, если задан,
  //               то новая карта будет добавлена к ней
  //  - istemp   - создание временной карты
  //  - outdir   - директория для размещения готовой карты
  //  - mapfile  - имя файла для готовой карты (или префикс)
  //  - isprefix - использовать mapfile как префикс, далее имя генерируется
  // При ошибке возвращает 0,
  // иначе - количество записей в открытом наборе данных
_SQLMIMP long int _SQLMAPI mapSQLMapSetupFromDBM(HDBMAP smap,
                                                 const WCHAR *filename,
                                                 HMAP mainmap,
                                                 long int istemp,
                                                 const WCHAR *outdir,
                                                 const WCHAR *mapfile,
                                                 long int isprefix);



  // Открыть файл SQL-карты (*.DBM)
  // параметры:
  //  - filename  - путь к файлу sql-карты
  //  - callevent - адрес функции оборатного вызова для уведомления о ходе выполенения
  //                (см. maptype.h)
  //  - parm      - адрес параметров, которые будут переданы при вызове функции
  //                (обычно адрес класса управляющей программы),
  //                вторым параметром передается код сообщения (например, WM_PROGRESS)
  //                третьим - значение для данного сообщения (например, процент от 0 до 100)
  // При ошибке возвращает ноль, иначе - идентификатор открытой карты
  // Примечание: данные кэшируются во временную пользовательскую карту
_SQLMIMP HMAP _SQLMAPI mapOpenSqlMap(const WCHAR *filename,
                                      EVENTCALL callevent, void *parm);


  // Добавить файл SQL-карты (*.DBM) в контекст открытых пространственных данных
  // параметры:
  //  - map       - идентификатор открытых пространственных данных (HMAP)
  //  - filename  - путь к файлу sql-карты
  //  - callevent - адрес функции оборатного вызова для уведомления о ходе выполенения
  //                (см. maptype.h)
  //  - parm      - адрес параметров, которые будут переданы при вызове функции
  //                (обычно адрес класса управляющей программы),
  //                вторым параметром передается код сообщения (например, WM_PROGRESS)
  //                третьим - значение для данного сообщения (например, процент от 0 до 100)
  // При ошибке возвращает ноль, иначе - идентификатор открытой карты
  // Примечание: данные кэшируются во временную пользовательскую карту
_SQLMIMP HSITE _SQLMAPI mapAppendSqlMap(HMAP map, const WCHAR *filename,
                                        EVENTCALL callevent, void *parm);




}
















#endif

